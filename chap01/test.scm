(load "../unit-test.scm")
(load "1-15.scm")
(load "1-16.scm")
(load "1-17.scm")
(load "1-18.scm")
(load "1-19.scm")
(load "1-20.scm")
(load "1-21.scm")
(load "1-22.scm")
(load "1-23.scm")
(load "1-24.scm")
(load "1-25.scm")
(load "1-26.scm")
(load "1-27.scm")
(load "1-28.scm")
(load "1-29.scm")
(load "1-30.scm")
(load "1-34.scm")
(display "1-15")
(assert-right  (duple 4 '(ha ha)) '((ha ha) (ha ha) (ha ha    ) (ha ha)))
(display "1-16")
(assert-right (invert '((a 1) (a 2) (1 b) (2 b))) '((1 a) (2 a) (b 1) (b 2)))
(display "1-17")
(assert-right (down '(1 2 3)) '((1) (2) (3)))
(display "1-18")
(assert-right (swapper 'a 'd '(a b c d)) '(d b c a))
(assert-right (swapper 'a 'd '(a d () c d)) '(d a () c a))
(assert-right (swapper 'x 'y '((x) y (z (x)))) '((y) x (z (y))))
(display "1-19")
(assert-right (list-set '(a b c d) 2 '(1 2)) '(a b (1 2) d))
(assert-right (list-ref (list-set '(a b c d) 3 '(1 5 10)) 3) '(1 5 10))
(display "1-20")
(assert-right (count-occurences 'x '(x y z)) 1)
(assert-right (count-occurences 'x '((f x) y (((x z) x)))) 3)
(assert-right (count-occurences 'x '((f x) y (((x z) () x)))) 3)
(assert-right (count-occurences 'w '((f x) y (((x z) x)))) 0)
(display "1-21")
(assert-right (product '(a b c) '(x y)) '((a x) (a y) (b x) (b y) (c x) (c y)))
(display "1-22")
(assert-right (filter-in number? '(a 2 (1 3) b 7)) '(2 7))
(assert-right (filter-in symbol? '(a (b c) 17 foo)) '(a foo))
(display "1-23")
(assert-right (list-index number? '(a 2 (1 3) b 7)) 1)
(assert-right (list-index symbol? '(a (b c) 17 foo)) 0)
(assert-right (list-index symbol? '(1 2 (a b ) 3)) #f)
(display "1-24")
(assert-right (every? number? '(a b c  3 e)) #f)
(assert-right (every? number? '(1 2 3 5 4)) #t)
(display "1-25")
(assert-right (exists? number? '(a b c 3 e)) #t)
(assert-right (exists? number? '(a b c d e)) #f)
(display "1-26")
(assert-right (up '((1 2) (3 4))) '(1 2 3 4))
(assert-right (up '((x (y)) z)) '(x (y) z))
(display "1-27")
(assert-right (flatten '(a b c)) '(a b c))
(assert-right (flatten '((a) () (b ()) () (c))) '(a b c))
(assert-right (flatten '((a b) c (((d)) e))) '(a b c d e))
(assert-right (flatten '(a b (() (c)))) '(a b c))
(display "1-28")
(assert-right (merge '(1 4) '(1 2 8)) '(1 1 2 4 8))
(assert-right (merge '(35 62 81 90 91) '(3 83 85 90)) '(3 35 62 81 83 85 90 90 91))
(display "1-29")
(assert-right (sort '(8 2 5 2 3)) '(2 2 3 5 8))
(display "1-30")
(assert-right (sort/predicate < '( 8 2 5 2 3)) '(2 2 3 5 8))
(assert-right (sort/predicate > '(8 2 5 2 3)) '(8 5 3 2 2))
(display "1-34")
(assert-right (path 17 '(14 (7 () (12 ()())) (26 (20 (17 ()()) ()) (31 ()())))) '(right left left))
